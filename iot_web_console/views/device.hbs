<!DOCTYPE html>
<html lang="en">	
	{{> head}}
	<body>
		<div class="container-fluid">
			<div class="row">
				<div class="col-xs-12 col-md-12">
			  		<div class="well well-lg well-material-teal-700" style="color: white">
						<h2>GreenVulcano Console for Internet of Things</h2>
			 		</div>
				</div>
		  	</div>
			<div class="row">
		  		<div class="col-xs-2 col-md-3">
		  			<div class="list-group style_list">
						{{> left_column}}
					</div>
				</div>
				<div class="col-xs-10 col-md-9">
					<div class="panel panel-primary panel-material-teal-300">
						<div class="panel-heading style_panel">
							<h3 class="panel-title">{{dev_name}}</h3>
							<img src="{{dev_img}}" class="img-circle image_panel shadow-z-2">
						</div>
						<div class="panel-body">
							<div class="row">
								<div class="col-xs-12 col-md-12">
									<p class="style_title"><strong>Status Device</strong></p>
								</div>								
							</div>
							<div class="row">
								<div class="col-xs-9 col-md-9">
									<div id="status_loader" class="loader"></div>
									<div id="status_true" class="alert alert-dismissable alert-success hidden">										
										<p><strong>Device connected</strong></p>
									</div>
									<div id="status_false" class="alert alert-dismissable alert-warning">										
										<p><strong>Device not connected</strong></p>
									</div>

								</div>
							</div>
							<div class="row">
								<div class="col-xs-3 col-md-3">
									<div class="panel panel-default">
										<div class="panel-body style_panel_sensor">
											<h1>{{dev_num_sens}}</h1>
											<p>sensors</p>
										</div>
									</div>
								</div>
								<div class="col-xs-3 col-md-3">
									<div class="panel panel-default">
										<div class="panel-body style_panel_actuator">
											<h1>{{dev_num_acts}}</h1>
											<p>actuators</p>
										</div>
									</div>
								</div>
								<div class="col-xs-3 col-md-3">
									<div class="panel panel-default">
										<div class="panel-body style_panel_ip">
											<h4>{{dev_ip}}</h4>
											<p>ip</p>
										</div>
									</div>
								</div>
								<div class="col-xs-3 col-md-3">
									<div class="panel panel-default">
										<div class="panel-body style_panel_mac">
											<h4>{{dev_mac}}</h4>
											<p>MAC address</p>
										</div>
									</div>
								</div>
							</div>
							<div class="row">
								<div class="col-xs-12 col-md-12">
									<p class="style_title">
									<strong>Control device</strong>
									</p>
								</div>
							</div>
							<div class="row" >
								<div class="col-xs-3 col-md-3">
									<a href="javascript:void(0)" id="btn_config" class="btn btn-warning btn-material-grey-500 disabled">Send config</a>
								</div>
								<div class="col-xs-3 col-md-3">
									<a href="javascript:void(0)" id="btn_inspect" class="inspect btn btn-primary btn-material-blue-500" data-toggle="modal" data-target="#myModal">inspect config</a>
								</div>
								<div class="col-xs-2 col-md-2 style_toggle">
									<div class="togglebutton ">
										<label><input name="check_log" id="check_log" type="checkbox">console</label>
									</div>
								</div>
								<div class="col-xs-2 col-md-2 style_toggle">
									<div class="togglebutton">
										<label><input name="sleep_mode" id="sleep_mode" type="checkbox">sleep</label>
									</div>
								</div>
								<div class="col-xs-2 col-md-2 style_toggle">
									<div class="togglebutton">
										<label><input name="demo_mode" id="demo_mode" type="checkbox">demo</label>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-md-3">
				</div>
				<div class="col-md-9">
					<div id="panel_log" class="panel panel-default style_log_panel">
						<pre id="panel_log_body" class="panel-body">
						</pre>
					</div>
				</div>
			</div>
		</div>

		<div id="myModal" class="modal fade">
			<div class="modal-dialog modal-lg">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title">{{dev_name}} Configuration</h4>
					</div>
					<div class="modal-body">
						<pre id="panel_config_body"> </pre>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
					</div>
				</div>
			</div>
		</div>

		<script type="text/javascript">
		    var json_config = JSON.parse("{{config}}".replace(/&quot;/g, "\""));
			var device_id = "{{dev_id}}";
			var sleep_enabled = JSON.parse("{{dev_sleep}}");
            var demo_enabled = JSON.parse("{{dev_demo}}");
            var VALUE_ON	= "ON";
            var VALUE_OFF	= "OFF";
            var VALUE_DEMO	= "DEMO";
            //var socket = io.connect('http://localhost:8181');
            var socket = io();
           	var client = undefined;
           	var mqtt_connected = false;

			var topic = {};
			topic.device = "/devices/" + device_id + "/#";
			topic.status = "/devices/" + device_id + "/status";
			topic.sensor = "/devices/" + device_id + "/sensors";
			topic.input  = "/devices/" + device_id + "/input";

			/******************************************************
             *
             ******************************************************/
			socket.on('last_mode-'+device_id, function(mode) {
				if(mode == "ON") {
					if(sleep_enabled) {
						$('#sleep_mode').prop("checked", false);
					}
				}
				else if(mode == "OFF") {

					if(sleep_enabled) {
						$('#sleep_mode').prop("checked", true);
					}

					$('#demo_mode').prop("checked", false);
					$("#demo_mode").attr("disabled", true);
				}
				else if(mode == "DEMO") {
					if(demo_enabled) {
						$('#demo_mode').prop("checked", true);
					}
				}			
  			});

            /******************************************************
             *
             ******************************************************/
			$("#sleep_mode").click(function(event) {
				if(mqtt_connected) {
					var enabled = $("#sleep_mode").is(":checked");
					var value = VALUE_ON;

					if(enabled) {
						value = VALUE_OFF;
						$("#demo_mode").attr("disabled", true);
						$('#demo_mode').prop("checked", false);
					}
					else {

						if(demo_enabled) {
							$("#demo_mode").attr("disabled", false);
						}
					}				

					var payload = "{\"value\":\"" + value + "\"}";
					var message = new Paho.MQTT.Message(payload);
					message.destinationName = topic.input;
					client.send(message);

					socket.emit("change_mode", device_id, "sleep", value);
				}
				else {
					event.preventDefault();
				}
			});

			/******************************************************
             *
             ******************************************************/
			$("#demo_mode").click(function() {
				if(mqtt_connected) {
					var enabled = $("#demo_mode").is(":checked");
					var value = VALUE_DEMO;

					if(!enabled) {
						value = VALUE_ON;
					}

					var payload = "{\"value\":\"" + value + "\"}";
					var message = new Paho.MQTT.Message(payload);
					message.destinationName = topic.input;
					client.send(message);

					socket.emit("change_mode", device_id, "demo", value);
				}
			});

			/******************************************************
             *
             ******************************************************/
			$("#check_log").click( function() {				
				$('#panel_log').toggle('slide', {"direction": "up"});

				if($('#panel_log').is(':visible')) {					
					$("html, body").animate({ scrollTop: $(document).height() }, "slow");
				} 
			});

			/******************************************************
             *
             ******************************************************/
			function hideStatusLoader() {
  				$("#status_loader").addClass("hidden");
			}

			/******************************************************
             *
             ******************************************************/
			$(document).ready(function() {
				setTimeout(hideStatusLoader, 5000);

				var DATE_FORMAT = 'YYYY/MM/DD HH:mm:ss:SSS';
	  		    var location = {};
	  		    location.hostname = "{{mqtt_host}}";
	  		    location.port = Number("{{mqtt_port}}");
	  		    client_id = "myclientid_" + parseInt(Math.random() * 100, 10);
    			client = new Paho.MQTT.Client(location.hostname, location.port, client_id);

    			var MAX_LOG = 200;
    			var log_message = [];

		  		$.material.init();

				if(sleep_enabled === false) {
					$("#sleep_mode").attr("disabled", true);
				}

				if(demo_enabled === false) {
					$("#demo_mode").attr("disabled", true);
				}

		  		$('input[name=check_log]').prop('checked', false);
	  		    $("#panel_log").hide();
	  		    $("#panel_config_body").html(JSON.stringify(json_config, null, 5));

				client.onConnectionLost = function(responseObject) {
					console.log("connection lost: " + responseObject.errorMessage);
				};

				client.onMessageArrived = function(message) {

					// look for status topic
					if(message.destinationName == topic.status) {
						try {							
							var status = JSON.parse(message.payloadString).st;

							//$("#status_loader").addClass("hidden");
							hideStatusLoader();

							if(status) {
								$("#status_true").removeClass("hidden");
								$("#status_false").addClass("hidden");
							}
							else {
								$("#status_false").removeClass("hidden");
								$("#status_true").addClass("hidden");
							}
						}
						catch(err) {
						    console.log("ERROR: " + err);
						}
					}

					// formatting message to display in the console panel
					var date = "[" + moment().format(DATE_FORMAT) + "]";

					msg = "\n" + date + " " + message.destinationName + ": " + message.payloadString;
					log_message = addRotate(log_message, msg, MAX_LOG);

					$('#panel_log_body').text(log_message.toString());

					// scrolldown
					var psconsole = $('#panel_log_body');
    				if(psconsole.length) {
       					psconsole.scrollTop(psconsole[0].scrollHeight - psconsole.height());
   					}
				};

				var options = {
					timeout: 3,
					onSuccess: function () {
						console.log("mqtt connected");

						mqtt_connected = true;
						client.subscribe(topic.device, {qos: 1});
					},
					onFailure: function (message) {
						console.log("Connection failed: " + message.errorMessage);
					}
				};

				client.connect(options);

				socket.emit("device_connected", device_id);
			});			
	  	</script>
	</body>
</html>